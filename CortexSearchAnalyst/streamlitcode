import json
import streamlit as st
import pandas as pd
from snowflake.snowpark.context import get_active_session
import _snowflake
import time
import requests
import matplotlib.pyplot as plt
import plotly.express as px
from datetime import datetime
from typing import Any, Dict, List, Optional


# Define constants
table_name = "CHUNK_CORTEX_PDF_USERNAME"
service_name = "PDF_CHUNK_SERVICE_USERNAME"
DATABASE = "CORTEX_LAB_DB"
SCHEMA = "CORTEX_LAB_SCHEMA"
STAGE = "CORTEX_ANALYSTSTAGE"
FILE = "book_model.yaml"

def get_cortex_search_attributes(session, service_name):
    services_query = f"SHOW CORTEX SEARCH SERVICES LIKE '{service_name}';"
    services_result = session.sql(services_query).collect()
    services_df = pd.DataFrame(services_result)

    if not services_df.empty and 'name' in services_df.columns and 'attribute_columns' in services_df.columns:
        service_row = services_df[services_df['name'] == service_name]
        if not service_row.empty:
            attribute_str = service_row.iloc[0]['attribute_columns']
            attributes = [attr.strip() for attr in attribute_str.split(',')]
            
            # Exclude 'CHUNK' from the attributes list
            attributes = [attr for attr in attributes if attr.upper() != 'CHUNK']
            return attributes
    return []


# Function to get available columns from the Snowflake table
def get_available_columns(session, table_name):
    column_query = f"""
    SELECT COLUMN_NAME
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = '{table_name}'
    ORDER BY ORDINAL_POSITION;
    """
    columns_df = session.sql(column_query).to_pandas()
    return columns_df['COLUMN_NAME'].tolist()

def run_cortex_search(session, database_name, schema_name, service_name, query, columns, filter_condition, limit):
    # If no filter_condition is provided, exclude the filter from the query
    if filter_condition:
        filter_str = f'"filter": {filter_condition},'
    else:
        filter_str = ""

    search_query = f"""
    SELECT PARSE_JSON(
        SNOWFLAKE.CORTEX.SEARCH_PREVIEW(
            '{database_name}.{schema_name}.{service_name}',
            '{{ 
               "query": "{query}",
               "columns": {columns},
               {filter_str}
               "limit": {limit}
            }}'
        )
    )['results'] as results;
    """

    result_df = session.sql(search_query).to_pandas()
    if not result_df.empty:
        results_json = json.loads(result_df.iloc[0]['RESULTS'])
        structured_results = pd.DataFrame(results_json)
    else:
        structured_results = pd.DataFrame(columns=json.loads(columns))
    return structured_results


def display_cortex_search(session):
    # Get available columns and attributes dynamically
    available_columns = get_available_columns(session, table_name)
    attributes = get_cortex_search_attributes(session, service_name)

    # Sidebar for inputs
    st.sidebar.header("🔍 Search Settings")
    query = st.sidebar.text_input("Enter your search query:")
    selected_columns = st.sidebar.multiselect("Select columns to retrieve:", available_columns, default=[])
    columns = json.dumps(selected_columns)

    # Optionally, select filter column and value
    use_filter = st.sidebar.checkbox("Apply Filter?")
    filter_condition = None
    if use_filter:
        filter_column = st.sidebar.selectbox("Select a filter column:", attributes)
        filter_value = st.sidebar.text_input(f"Enter filter value for {filter_column}:")
        if filter_column and filter_value:
            filter_condition = json.dumps({"@eq": {filter_column: filter_value}})
    
    limit = st.sidebar.number_input("Enter the limit for search results:", min_value=1, value=10)

    # Button to trigger the Cortex Search
    if st.sidebar.button("🚀 Run Search"):
        # Validate required fields: query and selected columns
        if not query:
            st.warning("⚠️ Please enter a search query.")
        elif not selected_columns:
            st.warning("⚠️ Please select at least one column to retrieve.")
        # Validate the filter fields if the filter is applied
        elif use_filter and (not filter_column or not filter_value):
            st.warning("⚠️ Please select a filter column and provide a filter value.")
        else:
            with st.spinner("Running Cortex search..."):
                results = run_cortex_search(session, DATABASE, SCHEMA, service_name, query, columns, filter_condition, limit)
                if not results.empty:
                    st.success(f"✅ Search completed successfully! Found {len(results)} results.")
                    st.dataframe(results)
                else:
                    st.warning("⚠️ No results found.")

    # Collapsible section for showing the raw SQL query
    with st.expander("🛠️ Show SQL Query"):
        filter_str = f'"filter": {filter_condition},' if filter_condition else ""
        st.code(f"""
        SELECT PARSE_JSON(
            SNOWFLAKE.CORTEX.SEARCH_PREVIEW(
                '{DATABASE}.{SCHEMA}.{service_name}',
                '{{ 
                   "query": "{query}",
                   "columns": {columns},
                   {filter_str}
                   "limit": {limit}
                }}'
            )
        )['results'] as results;
        """, language="sql")


def send_message(prompt: str) -> dict:
    """Calls the REST API and returns the response."""
    request_body = {
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    }
                ]
            }
        ],
        "semantic_model_file": f"@{DATABASE}.{SCHEMA}.{STAGE}/{FILE}",
    }
    resp = _snowflake.send_snow_api_request(
        "POST",
        f"/api/v2/cortex/analyst/message",
        {},
        {},
        request_body,
        {},
        30000,
    )
    if resp["status"] < 400:
        return json.loads(resp["content"])
    else:
        raise Exception(
            f"Failed request with status {resp['status']}: {resp}"
        )


def check_mixed_types(df: pd.DataFrame) -> bool:
    """Check for mixed types in the DataFrame columns and return True if any are found."""
    for col in df.columns:
        if df[col].apply(type).nunique() > 1:
            return True
    return False

def suggest_chart_type(df: pd.DataFrame) -> Dict[str, str]:
    """Suggest chart types based on the data types available in the DataFrame."""
    chart_options = {}
    numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
    categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
    date_columns = df.select_dtypes(include=['datetime64']).columns.tolist()

    if len(df.columns) == 1:
        chart_options = {"Table View 📋": "table"}
    elif len(df.columns) == 3 and "START_DATE" in df.columns and "END_DATE" in df.columns:
        chart_options = {"Bar Chart 📊": "bar"}
    else:
        if numeric_columns and categorical_columns:
            chart_options = {
                "Bar Chart 📊": "bar",
                "Line Chart 📈": "line",
                "Area Chart 🌐": "area",
                "Pie Chart 🥧": "pie",
                "Box Plot 📦": "box",
                "Scatter Plot 🔵": "scatter",
                "Violin Plot 🎻": "violin",
                "Density Heatmap 🌡️": "density_heatmap",
                "Sunburst Chart 🌞": "sunburst",
                "Treemap 🌳": "treemap",
                "Funnel Plot 🚥": "funnel",
            }
        elif numeric_columns:
            chart_options = {
                "Line Chart 📈": "line",
                "Area Chart 🌐": "area",
                "Histogram 📊": "histogram",
                "Box Plot 📦": "box",
                "Violin Plot 🎻": "violin",
            }
        elif categorical_columns or date_columns:
            chart_options = {
                "Pie Chart 🥧": "pie",
                "Bar Chart 📊": "bar",
                "Sunburst Chart 🌞": "sunburst",
                "Treemap 🌳": "treemap",
            }
        else:
            chart_options = {"Table View 📋": "table"}

    return chart_options

def rearrange_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Rearrange START_DATE and END_DATE columns to be at the end of the DataFrame."""
    date_columns = ["START_DATE", "END_DATE"]
    other_columns = [col for col in df.columns if col not in date_columns]
    rearranged_columns = other_columns + [col for col in date_columns if col in df.columns]
    return df[rearranged_columns]

def display_content(content: list, message_index: int = None) -> None:
    """Displays a content item for a message."""
    message_index = message_index or len(st.session_state.messages)
    for item in content:
        if item["type"] == "text":
            st.markdown(item["text"])
        elif item["type"] == "suggestions":
            with st.expander("Suggestions", expanded=True):
                for suggestion_index, suggestion in enumerate(item["suggestions"]):
                    if st.button(suggestion, key=f"{message_index}_{suggestion_index}"):
                        st.session_state.active_suggestion = suggestion
        elif item["type"] == "sql":
            with st.expander("SQL Query", expanded=False):
                st.code(item["statement"], language="sql")
            with st.expander("Results", expanded=True):
                with st.spinner("Running SQL..."):
                    session = get_active_session()
                    df = session.sql(item["statement"]).to_pandas()

                    if not df.empty:
                        if len(df) == 1 and len(df.columns) == 1:
                            # If only one row and one column are present, show only the Table View
                            st.dataframe(df)
                        elif len(df.columns) > 1 and len(df) == 1:
                            # One row and multiple columns: Provide Table View and Chart View (Bar Chart Only)
                            view_options = ["Table View", "Chart View"]
                            view_type = st.selectbox(
                                "Select View Type",
                                options=view_options,
                                index=1,  # Default to Table View
                                key=f"one_row_multi_col_view_type_{message_index}"
                            )
                            
                            if view_type == "Table View":
                                st.dataframe(df)
                            elif view_type == "Chart View":
                                # Show another dropdown to select the chart type
                                chart_options = ["Bar Chart"]
                                selected_chart = st.selectbox(
                                    "Select Chart Type",
                                    options=chart_options,
                                    index=0,  
                                    key=f"chart_type_{message_index}"
                                )
                                
                                if selected_chart == "Bar Chart":
                                    st.bar_chart(df.set_index(df.columns[0])[df.columns[1]])
                        else:
                            df = rearrange_columns(df)

                            view_type = st.selectbox(
                                "Select View Type",
                                options=["Table View", "Chart View"],
                                index=1,
                                key=f"view_type_{message_index}"
                            )
    
                            if view_type == "Table View":
                                st.dataframe(df)
                            elif view_type == "Chart View":
                                chart_options = suggest_chart_type(df)
                                selected_chart = st.selectbox(
                                    "Choose chart type:",
                                    list(chart_options.keys()),
                                    key=f"chart_select_{message_index}"
                                )
                                    
                                # Determine how to plot based on the suggested chart type
                                numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
                                categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
                                
                                if numeric_columns and categorical_columns:
                                        x_column = categorical_columns[0]
                                        y_column = numeric_columns[0]
                                        if chart_options[selected_chart] == "bar":
                                            st.bar_chart(df.set_index(x_column)[y_column])
                                        elif chart_options[selected_chart] == "line":
                                            st.line_chart(df.set_index(x_column)[y_column])
                                        elif chart_options[selected_chart] == "area":
                                            st.area_chart(df.set_index(x_column)[y_column])
                                        elif chart_options[selected_chart] == "pie":
                                            fig, ax = plt.subplots()
                                            df.set_index(x_column)[y_column].plot.pie(autopct="%1.1f%%", ax=ax)
                                            ax.set_ylabel('')
                                            st.pyplot(fig)
                                        elif chart_options[selected_chart] == "box":
                                            fig = px.box(df, x=x_column, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "scatter":
                                            fig = px.scatter(df, x=x_column, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "violin":
                                            fig = px.violin(df, x=x_column, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "density_heatmap":
                                            fig = px.density_heatmap(df, x=x_column, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "sunburst" and len(categorical_columns) > 1:
                                            fig = px.sunburst(df, path=[x_column, categorical_columns[1]])
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "treemap" and len(categorical_columns) > 1:
                                            fig = px.treemap(df, path=[x_column, categorical_columns[1]])
                                            st.plotly_chart(fig)
                                        else:
                                            st.warning(f"{selected_chart} not suitable for this data. Please choose another chart type.")

                                elif numeric_columns:
                                        y_column = numeric_columns[0]
                                        if chart_options[selected_chart] == "line":
                                            st.line_chart(df[y_column])
                                        elif chart_options[selected_chart] == "area":
                                            st.area_chart(df[y_column])
                                        elif chart_options[selected_chart] == "box":
                                            fig = px.box(df, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "scatter":
                                            fig = px.scatter(df, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "violin":
                                            fig = px.violin(df, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "density_heatmap":
                                            fig = px.density_heatmap(df, y=y_column)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "funnel":
                                            fig = px.funnel(df, y=y_column)
                                            st.plotly_chart(fig)
                                        else:
                                            st.warning(f"{selected_chart} not suitable for this data. Please choose another chart type.")
                                elif categorical_columns:
                                        x_column = categorical_columns[0]
                                        if chart_options[selected_chart] == "bar":
                                            st.bar_chart(df[x_column])
                                        elif chart_options[selected_chart] == "pie":
                                            fig, ax = plt.subplots()
                                            df[categorical_columns[0]].value_counts().plot.pie(autopct="%1.1f%%", ax=ax)
                                            ax.set_ylabel('')
                                            st.pyplot(fig)
                                        elif chart_options[selected_chart] == "sunburst" and len(categorical_columns) > 1:
                                            fig = px.sunburst(df, path=categorical_columns)
                                            st.plotly_chart(fig)
                                        elif chart_options[selected_chart] == "treemap" and len(categorical_columns) > 1:
                                            fig = px.treemap(df, path=categorical_columns)
                                            st.plotly_chart(fig)
                                        else:
                                            st.warning(f"{selected_chart} charts require hierarchical data with more than one categorical column. Please choose another chart type.")
                                
                                else:
                                    st.write("")

                    else:
                        st.dataframe(df)

def format_message(role: str, content: str) -> str:
    """Format message with a timestamp for better chat experience."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    formatted_message = f"**{role.capitalize()} [{timestamp}]:** {content}"
    return formatted_message


def process_message(prompt: str) -> None:
    """Processes a message and adds the response to the chat."""
    st.session_state.messages.append(
        {"role": "user", "content": [{"type": "text", "text": prompt}]}
    )
    with st.chat_message("user"):
        st.markdown(prompt)
    with st.chat_message("assistant"):
        with st.spinner("Generating response..."):
            response = send_message(prompt=prompt)
            content = response["message"]["content"]
            display_content(content=content)
    st.session_state.messages.append({"role": "assistant", "content": content})


# Main function to handle routing between Search and Analyst
def main():
    # Initialize session state if not already set
    if 'view' not in st.session_state:
        st.session_state['view'] = 'search'  # Default view is 'search'

    # Display dropdown for navigation between views
    st.sidebar.header("Navigation")
    selected_view = st.sidebar.selectbox(
        "Select View",
        options=["🔍 Cortex Search", "📊 Cortex Analyst"]
    )

    # Update session state based on dropdown selection
    if selected_view == "🔍 Cortex Search":
        st.session_state['view'] = 'search'
    elif selected_view == "📊 Cortex Analyst":
        st.session_state['view'] = 'analyst'

    # Start the Snowflake session
    session = get_active_session()

    # Switch between views based on session state
    if st.session_state['view'] == 'search':
        st.title("Cortex Search")
        display_cortex_search(session)
    elif st.session_state['view'] == 'analyst':
        st.title("Cortex Analyst")
        st.markdown(f"Semantic Model: {FILE}")

        if "messages" not in st.session_state:
            st.session_state.messages = []
            st.session_state.suggestions = []
            st.session_state.active_suggestion = None

        for message_index, message in enumerate(st.session_state.messages):
            with st.chat_message(message["role"]):
                display_content(content=message["content"], message_index=message_index)

        if user_input := st.chat_input("What is your question?"):
            process_message(prompt=user_input)
        
        if st.session_state.active_suggestion:
            process_message(prompt=st.session_state.active_suggestion)
            st.session_state.active_suggestion = None


# Run the main function
if __name__ == "__main__":
    main()

